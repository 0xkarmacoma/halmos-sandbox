// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

import "forge-std/Test.sol";
import {SymTest} from "halmos-cheatcodes/SymTest.sol";
import {console2} from "forge-std/console2.sol";

// [console.log] type(WithImmutable).creationCode
// [console.log] hex"60a060405234801561001057600080fd5b506040516102ca3803806102ca833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b6080516101b46101166000396000606401526101b46000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063aa64227414610030575b600080fd5b61004a6004803603810190610045919061011b565b610060565b6040516100579190610163565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e8826100bd565b9050919050565b6100f8816100dd565b811461010357600080fd5b50565b600081359050610115816100ef565b92915050565b600060208284031215610131576101306100b8565b5b600061013f84828501610106565b91505092915050565b60008115159050919050565b61015d81610148565b82525050565b60006020820190506101786000830184610154565b9291505056fea2646970667358221220cfc7e578b1890184ca69b85988df6b414d17740791b0139310dd14e61982e37364736f6c63430008180033"
contract WithImmutable {
    address immutable target;

    // during deployment, the actual code is the creation code concatenated with the symbolic variable
    // Concat(0x60a060405234801561001057600080fd5b506040516102ca3803806102ca833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b6080516101b46101166000396000606401526101b46000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063aa64227414610030575b600080fd5b61004a6004803603810190610045919061011b565b610060565b6040516100579190610163565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e8826100bd565b9050919050565b6100f8816100dd565b811461010357600080fd5b50565b600081359050610115816100ef565b92915050565b600060208284031215610131576101306100b8565b5b600061013f84828501610106565b91505092915050565b60008115159050919050565b61015d81610148565b82525050565b60006020820190506101786000830184610154565b9291505056fea2646970667358221220cfc7e578b1890184ca69b85988df6b414d17740791b0139310dd14e61982e37364736f6c63430008180033000000000000000000000000, halmos_x_address_01())
    //
    // after deployment, the runtime bytecode has the symbolic variable inlined in the code
    // Concat(0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063aa64227414610030575b600080fd5b61004a6004803603810190610045919061011b565b610060565b6040516100579190610163565b60405180910390f35b60007f000000000000000000000000, halmos_x_address_01(), 0x73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e8826100bd565b9050919050565b6100f8816100dd565b811461010357600080fd5b50565b600081359050610115816100ef565b92915050565b600060208284031215610131576101306100b8565b5b600061013f84828501610106565b91505092915050565b60008115159050919050565b61015d81610148565b82525050565b60006020820190506101786000830184610154565b9291505056fea2646970667358221220cfc7e578b1890184ca69b85988df6b414d17740791b0139310dd14e61982e37364736f6c63430008180033)
    constructor(address _target) {
        target = _target;
    }

    function isTarget(address other) external view returns (bool) {
        return other == target;
    }
}

contract Test71 is Test, SymTest {
    WithImmutable withImmutable;

    function setUp() public {
        address x = svm.createAddress("x");
        withImmutable = new WithImmutable(x);
    }

    function test_withConcreteImmutable() external {
        assert(!withImmutable.isTarget(address(0)));
    }

    // counterexample expected
    function test_symbolicImmutable(address y) external view {
        assert(!withImmutable.isTarget(y));
    }
}
